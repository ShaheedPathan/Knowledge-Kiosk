generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassYear {
  FE
  SE
  TE
  BE
}

model Class {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  year     ClassYear
  name     String // Example: 'FE', 'SE', etc.
  students Student[]

  teachers Teacher[] @relation(fields: [classId], references: [id])
  classId  String[]  @db.ObjectId

  subjects Subject[]
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role     @default(ADMIN)
  name      String

  // Admin can add teachers and subjects
  teachers Teacher[]
  subjects Subject[]
}

model Teacher {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  hash  String
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?
  roles     Role     @default(TEACHER)

  addedBy Admin  @relation(fields: [adminId], references: [id])
  adminId String @db.ObjectId

  // A teacher can be assigned multiple subjects
  subjects Subject[]

  // Teachers may be assigned to multiple classes //teacher aur class ka subject ke through automatically hora hai toh rehne de baad mein dhekte
  class   Class[]  @relation(fields: [classId], references: [id])
  classId String[] @db.ObjectId

  student   Student[] @relation(fields: [studentId], references: [id])
  studentId String[]  @db.ObjectId

  Post   Post[]   @relation(fields: [postId], references: [id])
  postId String[] @db.ObjectId
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?
  roles     Role     @default(STUDENT)

  // A student belongs to one class
  class   Class  @relation(fields: [classId], references: [id])
  classId String @db.ObjectId

  // A student can enroll in multiple subjects
  subjects  Subject[] @relation(fields: [subjectId], references: [id])
  subjectId String[]  @db.ObjectId

  //teacher ka bhi subject ke through hora hai rehne de baad mein dhekte
  teacher   Teacher[] @relation(fields: [teacherId], references: [id])
  teacherId String[]  @db.ObjectId

  Marks   Marks[]  @relation(fields: [marksId], references: [id])
  marksId String[] @db.ObjectId
}

model Subject {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  // A subject is assigned to a teacher
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @db.ObjectId

  // Admin adds the subject
  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String @db.ObjectId

  // Many students can take the subject
  students  Student[] @relation(fields: [studentId], references: [id])
  studentId String[]  @db.ObjectId

  // A subject can be assigned to specific classes
  classes Class  @relation(fields: [classId], references: [id])
  classId String @db.ObjectId

  Marks   Marks[]  @relation(fields: [marksId], references: [id])
  marksId String[] @db.ObjectId

  Post   Post[]   @relation(fields: [postId], references: [id])
  postId String[] @db.ObjectId
}

model Marks {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  student   Student[] @relation(fields: [studentId], references: [id])
  studentId String[]  @db.ObjectId

  subject   Subject[] @relation(fields: [subjectId], references: [id])
  subjectId String[]  @db.ObjectId
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  teacher   Teacher[] @relation(fields: [teacherId], references: [id])
  teacherId String[]  @db.ObjectId

  subject   Subject[] @relation(fields: [subjectId], references: [id])
  subjectId String[]  @db.ObjectId
}
